// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace share {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class GeoInfo;
class AdInfo;

// ===================================================================

class GeoInfo : public ::google::protobuf::Message {
 public:
  GeoInfo();
  virtual ~GeoInfo();

  GeoInfo(const GeoInfo& from);

  inline GeoInfo& operator=(const GeoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoInfo& default_instance();

  void Swap(GeoInfo* other);

  // implements Message ----------------------------------------------

  GeoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoInfo& from);
  void MergeFrom(const GeoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline const ::std::string& latitude() const;
  inline void set_latitude(const ::std::string& value);
  inline void set_latitude(const char* value);
  inline void set_latitude(const char* value, size_t size);
  inline ::std::string* mutable_latitude();
  inline ::std::string* release_latitude();
  inline void set_allocated_latitude(::std::string* latitude);

  // optional string longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline const ::std::string& longitude() const;
  inline void set_longitude(const ::std::string& value);
  inline void set_longitude(const char* value);
  inline void set_longitude(const char* value, size_t size);
  inline ::std::string* mutable_longitude();
  inline ::std::string* release_longitude();
  inline void set_allocated_longitude(::std::string* longitude);

  // optional int32 country = 3;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 3;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 province = 4;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 4;
  inline ::google::protobuf::int32 province() const;
  inline void set_province(::google::protobuf::int32 value);

  // optional int32 city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline ::google::protobuf::int32 city() const;
  inline void set_city(::google::protobuf::int32 value);

  // optional int32 district = 6;
  inline bool has_district() const;
  inline void clear_district();
  static const int kDistrictFieldNumber = 6;
  inline ::google::protobuf::int32 district() const;
  inline void set_district(::google::protobuf::int32 value);

  // optional int32 street = 7;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 7;
  inline ::google::protobuf::int32 street() const;
  inline void set_street(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.share.GeoInfo)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_district();
  inline void clear_has_district();
  inline void set_has_street();
  inline void clear_has_street();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* latitude_;
  ::std::string* longitude_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 province_;
  ::google::protobuf::int32 city_;
  ::google::protobuf::int32 district_;
  ::google::protobuf::int32 street_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static GeoInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdInfo : public ::google::protobuf::Message {
 public:
  AdInfo();
  virtual ~AdInfo();

  AdInfo(const AdInfo& from);

  inline AdInfo& operator=(const AdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdInfo& default_instance();

  void Swap(AdInfo* other);

  // implements Message ----------------------------------------------

  AdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdInfo& from);
  void MergeFrom(const AdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 advId = 1;
  inline bool has_advid() const;
  inline void clear_advid();
  static const int kAdvIdFieldNumber = 1;
  inline ::google::protobuf::int32 advid() const;
  inline void set_advid(::google::protobuf::int32 value);

  // optional int32 cpid = 2;
  inline bool has_cpid() const;
  inline void clear_cpid();
  static const int kCpidFieldNumber = 2;
  inline ::google::protobuf::int32 cpid() const;
  inline void set_cpid(::google::protobuf::int32 value);

  // optional int32 sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 bid = 4;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 4;
  inline ::google::protobuf::int32 bid() const;
  inline void set_bid(::google::protobuf::int32 value);

  // optional int32 clickId = 5;
  inline bool has_clickid() const;
  inline void clear_clickid();
  static const int kClickIdFieldNumber = 5;
  inline ::google::protobuf::int32 clickid() const;
  inline void set_clickid(::google::protobuf::int32 value);

  // optional int32 adxid = 6;
  inline bool has_adxid() const;
  inline void clear_adxid();
  static const int kAdxidFieldNumber = 6;
  inline ::google::protobuf::int32 adxid() const;
  inline void set_adxid(::google::protobuf::int32 value);

  // optional int32 mid = 7;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 7;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // optional int32 cid = 8;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 8;
  inline ::google::protobuf::int32 cid() const;
  inline void set_cid(::google::protobuf::int32 value);

  // optional int32 pid = 9;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 9;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string landingUrl = 10;
  inline bool has_landingurl() const;
  inline void clear_landingurl();
  static const int kLandingUrlFieldNumber = 10;
  inline const ::std::string& landingurl() const;
  inline void set_landingurl(const ::std::string& value);
  inline void set_landingurl(const char* value);
  inline void set_landingurl(const char* value, size_t size);
  inline ::std::string* mutable_landingurl();
  inline ::std::string* release_landingurl();
  inline void set_allocated_landingurl(::std::string* landingurl);

  // optional int32 cost = 11;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 11;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 bidPrice = 12;
  inline bool has_bidprice() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 12;
  inline ::google::protobuf::int32 bidprice() const;
  inline void set_bidprice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.share.AdInfo)
 private:
  inline void set_has_advid();
  inline void clear_has_advid();
  inline void set_has_cpid();
  inline void clear_has_cpid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_clickid();
  inline void clear_has_clickid();
  inline void set_has_adxid();
  inline void clear_has_adxid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_landingurl();
  inline void clear_has_landingurl();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_bidprice();
  inline void clear_has_bidprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 advid_;
  ::google::protobuf::int32 cpid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 clickid_;
  ::google::protobuf::int32 adxid_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 cid_;
  ::std::string* landingurl_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 bidprice_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static AdInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GeoInfo

// optional string latitude = 1;
inline bool GeoInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoInfo::clear_latitude() {
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_->clear();
  }
  clear_has_latitude();
}
inline const ::std::string& GeoInfo::latitude() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.latitude)
  return *latitude_;
}
inline void GeoInfo::set_latitude(const ::std::string& value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.latitude)
}
inline void GeoInfo::set_latitude(const char* value) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.share.GeoInfo.latitude)
}
inline void GeoInfo::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  latitude_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.share.GeoInfo.latitude)
}
inline ::std::string* GeoInfo::mutable_latitude() {
  set_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    latitude_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.share.GeoInfo.latitude)
  return latitude_;
}
inline ::std::string* GeoInfo::release_latitude() {
  clear_has_latitude();
  if (latitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = latitude_;
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GeoInfo::set_allocated_latitude(::std::string* latitude) {
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_;
  }
  if (latitude) {
    set_has_latitude();
    latitude_ = latitude;
  } else {
    clear_has_latitude();
    latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.GeoInfo.latitude)
}

// optional string longitude = 2;
inline bool GeoInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoInfo::clear_longitude() {
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_->clear();
  }
  clear_has_longitude();
}
inline const ::std::string& GeoInfo::longitude() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.longitude)
  return *longitude_;
}
inline void GeoInfo::set_longitude(const ::std::string& value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.longitude)
}
inline void GeoInfo::set_longitude(const char* value) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.share.GeoInfo.longitude)
}
inline void GeoInfo::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  longitude_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.share.GeoInfo.longitude)
}
inline ::std::string* GeoInfo::mutable_longitude() {
  set_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    longitude_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.share.GeoInfo.longitude)
  return longitude_;
}
inline ::std::string* GeoInfo::release_longitude() {
  clear_has_longitude();
  if (longitude_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = longitude_;
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GeoInfo::set_allocated_longitude(::std::string* longitude) {
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_;
  }
  if (longitude) {
    set_has_longitude();
    longitude_ = longitude;
  } else {
    clear_has_longitude();
    longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.GeoInfo.longitude)
}

// optional int32 country = 3;
inline bool GeoInfo::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeoInfo::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeoInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeoInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 GeoInfo::country() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.country)
  return country_;
}
inline void GeoInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.country)
}

// optional int32 province = 4;
inline bool GeoInfo::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeoInfo::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeoInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GeoInfo::clear_province() {
  province_ = 0;
  clear_has_province();
}
inline ::google::protobuf::int32 GeoInfo::province() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.province)
  return province_;
}
inline void GeoInfo::set_province(::google::protobuf::int32 value) {
  set_has_province();
  province_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.province)
}

// optional int32 city = 5;
inline bool GeoInfo::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GeoInfo::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GeoInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GeoInfo::clear_city() {
  city_ = 0;
  clear_has_city();
}
inline ::google::protobuf::int32 GeoInfo::city() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.city)
  return city_;
}
inline void GeoInfo::set_city(::google::protobuf::int32 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.city)
}

// optional int32 district = 6;
inline bool GeoInfo::has_district() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GeoInfo::set_has_district() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GeoInfo::clear_has_district() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GeoInfo::clear_district() {
  district_ = 0;
  clear_has_district();
}
inline ::google::protobuf::int32 GeoInfo::district() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.district)
  return district_;
}
inline void GeoInfo::set_district(::google::protobuf::int32 value) {
  set_has_district();
  district_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.district)
}

// optional int32 street = 7;
inline bool GeoInfo::has_street() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GeoInfo::set_has_street() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GeoInfo::clear_has_street() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GeoInfo::clear_street() {
  street_ = 0;
  clear_has_street();
}
inline ::google::protobuf::int32 GeoInfo::street() const {
  // @@protoc_insertion_point(field_get:protocol.share.GeoInfo.street)
  return street_;
}
inline void GeoInfo::set_street(::google::protobuf::int32 value) {
  set_has_street();
  street_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.GeoInfo.street)
}

// -------------------------------------------------------------------

// AdInfo

// required int32 advId = 1;
inline bool AdInfo::has_advid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdInfo::set_has_advid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdInfo::clear_has_advid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdInfo::clear_advid() {
  advid_ = 0;
  clear_has_advid();
}
inline ::google::protobuf::int32 AdInfo::advid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.advId)
  return advid_;
}
inline void AdInfo::set_advid(::google::protobuf::int32 value) {
  set_has_advid();
  advid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.advId)
}

// optional int32 cpid = 2;
inline bool AdInfo::has_cpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdInfo::set_has_cpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdInfo::clear_has_cpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdInfo::clear_cpid() {
  cpid_ = 0;
  clear_has_cpid();
}
inline ::google::protobuf::int32 AdInfo::cpid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.cpid)
  return cpid_;
}
inline void AdInfo::set_cpid(::google::protobuf::int32 value) {
  set_has_cpid();
  cpid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.cpid)
}

// optional int32 sid = 3;
inline bool AdInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 AdInfo::sid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.sid)
  return sid_;
}
inline void AdInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.sid)
}

// optional int32 bid = 4;
inline bool AdInfo::has_bid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdInfo::set_has_bid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdInfo::clear_has_bid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdInfo::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline ::google::protobuf::int32 AdInfo::bid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.bid)
  return bid_;
}
inline void AdInfo::set_bid(::google::protobuf::int32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.bid)
}

// optional int32 clickId = 5;
inline bool AdInfo::has_clickid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdInfo::set_has_clickid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdInfo::clear_has_clickid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdInfo::clear_clickid() {
  clickid_ = 0;
  clear_has_clickid();
}
inline ::google::protobuf::int32 AdInfo::clickid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.clickId)
  return clickid_;
}
inline void AdInfo::set_clickid(::google::protobuf::int32 value) {
  set_has_clickid();
  clickid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.clickId)
}

// optional int32 adxid = 6;
inline bool AdInfo::has_adxid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdInfo::set_has_adxid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdInfo::clear_has_adxid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdInfo::clear_adxid() {
  adxid_ = 0;
  clear_has_adxid();
}
inline ::google::protobuf::int32 AdInfo::adxid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.adxid)
  return adxid_;
}
inline void AdInfo::set_adxid(::google::protobuf::int32 value) {
  set_has_adxid();
  adxid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.adxid)
}

// optional int32 mid = 7;
inline bool AdInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdInfo::set_has_mid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdInfo::clear_has_mid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdInfo::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 AdInfo::mid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.mid)
  return mid_;
}
inline void AdInfo::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.mid)
}

// optional int32 cid = 8;
inline bool AdInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdInfo::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 AdInfo::cid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.cid)
  return cid_;
}
inline void AdInfo::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.cid)
}

// optional int32 pid = 9;
inline bool AdInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 AdInfo::pid() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.pid)
  return pid_;
}
inline void AdInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.pid)
}

// optional string landingUrl = 10;
inline bool AdInfo::has_landingurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AdInfo::set_has_landingurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AdInfo::clear_has_landingurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AdInfo::clear_landingurl() {
  if (landingurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    landingurl_->clear();
  }
  clear_has_landingurl();
}
inline const ::std::string& AdInfo::landingurl() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.landingUrl)
  return *landingurl_;
}
inline void AdInfo::set_landingurl(const ::std::string& value) {
  set_has_landingurl();
  if (landingurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    landingurl_ = new ::std::string;
  }
  landingurl_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.landingUrl)
}
inline void AdInfo::set_landingurl(const char* value) {
  set_has_landingurl();
  if (landingurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    landingurl_ = new ::std::string;
  }
  landingurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.share.AdInfo.landingUrl)
}
inline void AdInfo::set_landingurl(const char* value, size_t size) {
  set_has_landingurl();
  if (landingurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    landingurl_ = new ::std::string;
  }
  landingurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.share.AdInfo.landingUrl)
}
inline ::std::string* AdInfo::mutable_landingurl() {
  set_has_landingurl();
  if (landingurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    landingurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.share.AdInfo.landingUrl)
  return landingurl_;
}
inline ::std::string* AdInfo::release_landingurl() {
  clear_has_landingurl();
  if (landingurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = landingurl_;
    landingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdInfo::set_allocated_landingurl(::std::string* landingurl) {
  if (landingurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete landingurl_;
  }
  if (landingurl) {
    set_has_landingurl();
    landingurl_ = landingurl;
  } else {
    clear_has_landingurl();
    landingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.AdInfo.landingUrl)
}

// optional int32 cost = 11;
inline bool AdInfo::has_cost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AdInfo::set_has_cost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AdInfo::clear_has_cost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AdInfo::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 AdInfo::cost() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.cost)
  return cost_;
}
inline void AdInfo::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.cost)
}

// optional int32 bidPrice = 12;
inline bool AdInfo::has_bidprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AdInfo::set_has_bidprice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AdInfo::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AdInfo::clear_bidprice() {
  bidprice_ = 0;
  clear_has_bidprice();
}
inline ::google::protobuf::int32 AdInfo::bidprice() const {
  // @@protoc_insertion_point(field_get:protocol.share.AdInfo.bidPrice)
  return bidprice_;
}
inline void AdInfo::set_bidprice(::google::protobuf::int32 value) {
  set_has_bidprice();
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.AdInfo.bidPrice)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace share
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
