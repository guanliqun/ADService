// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: click.proto

#ifndef PROTOBUF_click_2eproto__INCLUDED
#define PROTOBUF_click_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {
namespace share {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_click_2eproto();
void protobuf_AssignDesc_click_2eproto();
void protobuf_ShutdownFile_click_2eproto();

class ClickRequest;
class ClickResponse;

// ===================================================================

class ClickRequest : public ::google::protobuf::Message {
 public:
  ClickRequest();
  virtual ~ClickRequest();

  ClickRequest(const ClickRequest& from);

  inline ClickRequest& operator=(const ClickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickRequest& default_instance();

  void Swap(ClickRequest* other);

  // implements Message ----------------------------------------------

  ClickRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickRequest& from);
  void MergeFrom(const ClickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cookiesId = 1;
  inline bool has_cookiesid() const;
  inline void clear_cookiesid();
  static const int kCookiesIdFieldNumber = 1;
  inline const ::std::string& cookiesid() const;
  inline void set_cookiesid(const ::std::string& value);
  inline void set_cookiesid(const char* value);
  inline void set_cookiesid(const char* value, size_t size);
  inline ::std::string* mutable_cookiesid();
  inline ::std::string* release_cookiesid();
  inline void set_allocated_cookiesid(::std::string* cookiesid);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional .protocol.share.GeoInfo geoInfo = 4;
  inline bool has_geoinfo() const;
  inline void clear_geoinfo();
  static const int kGeoInfoFieldNumber = 4;
  inline const ::protocol::share::GeoInfo& geoinfo() const;
  inline ::protocol::share::GeoInfo* mutable_geoinfo();
  inline ::protocol::share::GeoInfo* release_geoinfo();
  inline void set_allocated_geoinfo(::protocol::share::GeoInfo* geoinfo);

  // optional .protocol.share.AdInfo adInfo = 5;
  inline bool has_adinfo() const;
  inline void clear_adinfo();
  static const int kAdInfoFieldNumber = 5;
  inline const ::protocol::share::AdInfo& adinfo() const;
  inline ::protocol::share::AdInfo* mutable_adinfo();
  inline ::protocol::share::AdInfo* release_adinfo();
  inline void set_allocated_adinfo(::protocol::share::AdInfo* adinfo);

  // @@protoc_insertion_point(class_scope:protocol.share.ClickRequest)
 private:
  inline void set_has_cookiesid();
  inline void clear_has_cookiesid();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_geoinfo();
  inline void clear_has_geoinfo();
  inline void set_has_adinfo();
  inline void clear_has_adinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cookiesid_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 sex_;
  ::protocol::share::GeoInfo* geoinfo_;
  ::protocol::share::AdInfo* adinfo_;
  friend void  protobuf_AddDesc_click_2eproto();
  friend void protobuf_AssignDesc_click_2eproto();
  friend void protobuf_ShutdownFile_click_2eproto();

  void InitAsDefaultInstance();
  static ClickRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClickResponse : public ::google::protobuf::Message {
 public:
  ClickResponse();
  virtual ~ClickResponse();

  ClickResponse(const ClickResponse& from);

  inline ClickResponse& operator=(const ClickResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickResponse& default_instance();

  void Swap(ClickResponse* other);

  // implements Message ----------------------------------------------

  ClickResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickResponse& from);
  void MergeFrom(const ClickResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cookiesId = 1;
  inline bool has_cookiesid() const;
  inline void clear_cookiesid();
  static const int kCookiesIdFieldNumber = 1;
  inline const ::std::string& cookiesid() const;
  inline void set_cookiesid(const ::std::string& value);
  inline void set_cookiesid(const char* value);
  inline void set_cookiesid(const char* value, size_t size);
  inline ::std::string* mutable_cookiesid();
  inline ::std::string* release_cookiesid();
  inline void set_allocated_cookiesid(::std::string* cookiesid);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional .protocol.share.GeoInfo geoInfo = 4;
  inline bool has_geoinfo() const;
  inline void clear_geoinfo();
  static const int kGeoInfoFieldNumber = 4;
  inline const ::protocol::share::GeoInfo& geoinfo() const;
  inline ::protocol::share::GeoInfo* mutable_geoinfo();
  inline ::protocol::share::GeoInfo* release_geoinfo();
  inline void set_allocated_geoinfo(::protocol::share::GeoInfo* geoinfo);

  // optional .protocol.share.AdInfo adInfo = 5;
  inline bool has_adinfo() const;
  inline void clear_adinfo();
  static const int kAdInfoFieldNumber = 5;
  inline const ::protocol::share::AdInfo& adinfo() const;
  inline ::protocol::share::AdInfo* mutable_adinfo();
  inline ::protocol::share::AdInfo* release_adinfo();
  inline void set_allocated_adinfo(::protocol::share::AdInfo* adinfo);

  // @@protoc_insertion_point(class_scope:protocol.share.ClickResponse)
 private:
  inline void set_has_cookiesid();
  inline void clear_has_cookiesid();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_geoinfo();
  inline void clear_has_geoinfo();
  inline void set_has_adinfo();
  inline void clear_has_adinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cookiesid_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 sex_;
  ::protocol::share::GeoInfo* geoinfo_;
  ::protocol::share::AdInfo* adinfo_;
  friend void  protobuf_AddDesc_click_2eproto();
  friend void protobuf_AssignDesc_click_2eproto();
  friend void protobuf_ShutdownFile_click_2eproto();

  void InitAsDefaultInstance();
  static ClickResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ClickRequest

// optional string cookiesId = 1;
inline bool ClickRequest::has_cookiesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickRequest::set_has_cookiesid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickRequest::clear_has_cookiesid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickRequest::clear_cookiesid() {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_->clear();
  }
  clear_has_cookiesid();
}
inline const ::std::string& ClickRequest::cookiesid() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickRequest.cookiesId)
  return *cookiesid_;
}
inline void ClickRequest::set_cookiesid(const ::std::string& value) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.share.ClickRequest.cookiesId)
}
inline void ClickRequest::set_cookiesid(const char* value) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.share.ClickRequest.cookiesId)
}
inline void ClickRequest::set_cookiesid(const char* value, size_t size) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.share.ClickRequest.cookiesId)
}
inline ::std::string* ClickRequest::mutable_cookiesid() {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickRequest.cookiesId)
  return cookiesid_;
}
inline ::std::string* ClickRequest::release_cookiesid() {
  clear_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookiesid_;
    cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClickRequest::set_allocated_cookiesid(::std::string* cookiesid) {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookiesid_;
  }
  if (cookiesid) {
    set_has_cookiesid();
    cookiesid_ = cookiesid;
  } else {
    clear_has_cookiesid();
    cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickRequest.cookiesId)
}

// optional int32 age = 2;
inline bool ClickRequest::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickRequest::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickRequest::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickRequest::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 ClickRequest::age() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickRequest.age)
  return age_;
}
inline void ClickRequest::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.ClickRequest.age)
}

// optional int32 sex = 3;
inline bool ClickRequest::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickRequest::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickRequest::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickRequest::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ClickRequest::sex() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickRequest.sex)
  return sex_;
}
inline void ClickRequest::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.ClickRequest.sex)
}

// optional .protocol.share.GeoInfo geoInfo = 4;
inline bool ClickRequest::has_geoinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickRequest::set_has_geoinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickRequest::clear_has_geoinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickRequest::clear_geoinfo() {
  if (geoinfo_ != NULL) geoinfo_->::protocol::share::GeoInfo::Clear();
  clear_has_geoinfo();
}
inline const ::protocol::share::GeoInfo& ClickRequest::geoinfo() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickRequest.geoInfo)
  return geoinfo_ != NULL ? *geoinfo_ : *default_instance_->geoinfo_;
}
inline ::protocol::share::GeoInfo* ClickRequest::mutable_geoinfo() {
  set_has_geoinfo();
  if (geoinfo_ == NULL) geoinfo_ = new ::protocol::share::GeoInfo;
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickRequest.geoInfo)
  return geoinfo_;
}
inline ::protocol::share::GeoInfo* ClickRequest::release_geoinfo() {
  clear_has_geoinfo();
  ::protocol::share::GeoInfo* temp = geoinfo_;
  geoinfo_ = NULL;
  return temp;
}
inline void ClickRequest::set_allocated_geoinfo(::protocol::share::GeoInfo* geoinfo) {
  delete geoinfo_;
  geoinfo_ = geoinfo;
  if (geoinfo) {
    set_has_geoinfo();
  } else {
    clear_has_geoinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickRequest.geoInfo)
}

// optional .protocol.share.AdInfo adInfo = 5;
inline bool ClickRequest::has_adinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClickRequest::set_has_adinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClickRequest::clear_has_adinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClickRequest::clear_adinfo() {
  if (adinfo_ != NULL) adinfo_->::protocol::share::AdInfo::Clear();
  clear_has_adinfo();
}
inline const ::protocol::share::AdInfo& ClickRequest::adinfo() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickRequest.adInfo)
  return adinfo_ != NULL ? *adinfo_ : *default_instance_->adinfo_;
}
inline ::protocol::share::AdInfo* ClickRequest::mutable_adinfo() {
  set_has_adinfo();
  if (adinfo_ == NULL) adinfo_ = new ::protocol::share::AdInfo;
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickRequest.adInfo)
  return adinfo_;
}
inline ::protocol::share::AdInfo* ClickRequest::release_adinfo() {
  clear_has_adinfo();
  ::protocol::share::AdInfo* temp = adinfo_;
  adinfo_ = NULL;
  return temp;
}
inline void ClickRequest::set_allocated_adinfo(::protocol::share::AdInfo* adinfo) {
  delete adinfo_;
  adinfo_ = adinfo;
  if (adinfo) {
    set_has_adinfo();
  } else {
    clear_has_adinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickRequest.adInfo)
}

// -------------------------------------------------------------------

// ClickResponse

// required string cookiesId = 1;
inline bool ClickResponse::has_cookiesid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickResponse::set_has_cookiesid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickResponse::clear_has_cookiesid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickResponse::clear_cookiesid() {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_->clear();
  }
  clear_has_cookiesid();
}
inline const ::std::string& ClickResponse::cookiesid() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickResponse.cookiesId)
  return *cookiesid_;
}
inline void ClickResponse::set_cookiesid(const ::std::string& value) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.share.ClickResponse.cookiesId)
}
inline void ClickResponse::set_cookiesid(const char* value) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.share.ClickResponse.cookiesId)
}
inline void ClickResponse::set_cookiesid(const char* value, size_t size) {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  cookiesid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.share.ClickResponse.cookiesId)
}
inline ::std::string* ClickResponse::mutable_cookiesid() {
  set_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookiesid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickResponse.cookiesId)
  return cookiesid_;
}
inline ::std::string* ClickResponse::release_cookiesid() {
  clear_has_cookiesid();
  if (cookiesid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookiesid_;
    cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClickResponse::set_allocated_cookiesid(::std::string* cookiesid) {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookiesid_;
  }
  if (cookiesid) {
    set_has_cookiesid();
    cookiesid_ = cookiesid;
  } else {
    clear_has_cookiesid();
    cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickResponse.cookiesId)
}

// optional int32 age = 2;
inline bool ClickResponse::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickResponse::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickResponse::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickResponse::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 ClickResponse::age() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickResponse.age)
  return age_;
}
inline void ClickResponse::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.ClickResponse.age)
}

// optional int32 sex = 3;
inline bool ClickResponse::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickResponse::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickResponse::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickResponse::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ClickResponse::sex() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickResponse.sex)
  return sex_;
}
inline void ClickResponse::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:protocol.share.ClickResponse.sex)
}

// optional .protocol.share.GeoInfo geoInfo = 4;
inline bool ClickResponse::has_geoinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickResponse::set_has_geoinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickResponse::clear_has_geoinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickResponse::clear_geoinfo() {
  if (geoinfo_ != NULL) geoinfo_->::protocol::share::GeoInfo::Clear();
  clear_has_geoinfo();
}
inline const ::protocol::share::GeoInfo& ClickResponse::geoinfo() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickResponse.geoInfo)
  return geoinfo_ != NULL ? *geoinfo_ : *default_instance_->geoinfo_;
}
inline ::protocol::share::GeoInfo* ClickResponse::mutable_geoinfo() {
  set_has_geoinfo();
  if (geoinfo_ == NULL) geoinfo_ = new ::protocol::share::GeoInfo;
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickResponse.geoInfo)
  return geoinfo_;
}
inline ::protocol::share::GeoInfo* ClickResponse::release_geoinfo() {
  clear_has_geoinfo();
  ::protocol::share::GeoInfo* temp = geoinfo_;
  geoinfo_ = NULL;
  return temp;
}
inline void ClickResponse::set_allocated_geoinfo(::protocol::share::GeoInfo* geoinfo) {
  delete geoinfo_;
  geoinfo_ = geoinfo;
  if (geoinfo) {
    set_has_geoinfo();
  } else {
    clear_has_geoinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickResponse.geoInfo)
}

// optional .protocol.share.AdInfo adInfo = 5;
inline bool ClickResponse::has_adinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClickResponse::set_has_adinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClickResponse::clear_has_adinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClickResponse::clear_adinfo() {
  if (adinfo_ != NULL) adinfo_->::protocol::share::AdInfo::Clear();
  clear_has_adinfo();
}
inline const ::protocol::share::AdInfo& ClickResponse::adinfo() const {
  // @@protoc_insertion_point(field_get:protocol.share.ClickResponse.adInfo)
  return adinfo_ != NULL ? *adinfo_ : *default_instance_->adinfo_;
}
inline ::protocol::share::AdInfo* ClickResponse::mutable_adinfo() {
  set_has_adinfo();
  if (adinfo_ == NULL) adinfo_ = new ::protocol::share::AdInfo;
  // @@protoc_insertion_point(field_mutable:protocol.share.ClickResponse.adInfo)
  return adinfo_;
}
inline ::protocol::share::AdInfo* ClickResponse::release_adinfo() {
  clear_has_adinfo();
  ::protocol::share::AdInfo* temp = adinfo_;
  adinfo_ = NULL;
  return temp;
}
inline void ClickResponse::set_allocated_adinfo(::protocol::share::AdInfo* adinfo) {
  delete adinfo_;
  adinfo_ = adinfo;
  if (adinfo) {
    set_has_adinfo();
  } else {
    clear_has_adinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.share.ClickResponse.adInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace share
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_click_2eproto__INCLUDED
