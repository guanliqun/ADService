// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: click.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "click.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace share {

namespace {

const ::google::protobuf::Descriptor* ClickRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_click_2eproto() {
  protobuf_AddDesc_click_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "click.proto");
  GOOGLE_CHECK(file != NULL);
  ClickRequest_descriptor_ = file->message_type(0);
  static const int ClickRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, cookiesid_),
  };
  ClickRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickRequest_descriptor_,
      ClickRequest::default_instance_,
      ClickRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickRequest));
  ClickResponse_descriptor_ = file->message_type(1);
  static const int ClickResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, cookiesid_),
  };
  ClickResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickResponse_descriptor_,
      ClickResponse::default_instance_,
      ClickResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_click_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickRequest_descriptor_, &ClickRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickResponse_descriptor_, &ClickResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_click_2eproto() {
  delete ClickRequest::default_instance_;
  delete ClickRequest_reflection_;
  delete ClickResponse::default_instance_;
  delete ClickResponse_reflection_;
}

void protobuf_AddDesc_click_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013click.proto\022\016protocol.share\"!\n\014ClickRe"
    "quest\022\021\n\tcookiesId\030\001 \001(\t\"\"\n\rClickRespons"
    "e\022\021\n\tcookiesId\030\001 \002(\t", 100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "click.proto", &protobuf_RegisterTypes);
  ClickRequest::default_instance_ = new ClickRequest();
  ClickResponse::default_instance_ = new ClickResponse();
  ClickRequest::default_instance_->InitAsDefaultInstance();
  ClickResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_click_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_click_2eproto {
  StaticDescriptorInitializer_click_2eproto() {
    protobuf_AddDesc_click_2eproto();
  }
} static_descriptor_initializer_click_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClickRequest::kCookiesIdFieldNumber;
#endif  // !_MSC_VER

ClickRequest::ClickRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.share.ClickRequest)
}

void ClickRequest::InitAsDefaultInstance() {
}

ClickRequest::ClickRequest(const ClickRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.share.ClickRequest)
}

void ClickRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickRequest::~ClickRequest() {
  // @@protoc_insertion_point(destructor:protocol.share.ClickRequest)
  SharedDtor();
}

void ClickRequest::SharedDtor() {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookiesid_;
  }
  if (this != default_instance_) {
  }
}

void ClickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickRequest_descriptor_;
}

const ClickRequest& ClickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_click_2eproto();
  return *default_instance_;
}

ClickRequest* ClickRequest::default_instance_ = NULL;

ClickRequest* ClickRequest::New() const {
  return new ClickRequest;
}

void ClickRequest::Clear() {
  if (has_cookiesid()) {
    if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cookiesid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.share.ClickRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cookiesId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookiesid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cookiesid().data(), this->cookiesid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cookiesid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.share.ClickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.share.ClickRequest)
  return false;
#undef DO_
}

void ClickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.share.ClickRequest)
  // optional string cookiesId = 1;
  if (has_cookiesid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookiesid().data(), this->cookiesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookiesid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cookiesid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.share.ClickRequest)
}

::google::protobuf::uint8* ClickRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.share.ClickRequest)
  // optional string cookiesId = 1;
  if (has_cookiesid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookiesid().data(), this->cookiesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookiesid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookiesid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.share.ClickRequest)
  return target;
}

int ClickRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cookiesId = 1;
    if (has_cookiesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookiesid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickRequest::MergeFrom(const ClickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookiesid()) {
      set_cookiesid(from.cookiesid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickRequest::CopyFrom(const ClickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickRequest::IsInitialized() const {

  return true;
}

void ClickRequest::Swap(ClickRequest* other) {
  if (other != this) {
    std::swap(cookiesid_, other->cookiesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickRequest_descriptor_;
  metadata.reflection = ClickRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickResponse::kCookiesIdFieldNumber;
#endif  // !_MSC_VER

ClickResponse::ClickResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.share.ClickResponse)
}

void ClickResponse::InitAsDefaultInstance() {
}

ClickResponse::ClickResponse(const ClickResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.share.ClickResponse)
}

void ClickResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookiesid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickResponse::~ClickResponse() {
  // @@protoc_insertion_point(destructor:protocol.share.ClickResponse)
  SharedDtor();
}

void ClickResponse::SharedDtor() {
  if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookiesid_;
  }
  if (this != default_instance_) {
  }
}

void ClickResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickResponse_descriptor_;
}

const ClickResponse& ClickResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_click_2eproto();
  return *default_instance_;
}

ClickResponse* ClickResponse::default_instance_ = NULL;

ClickResponse* ClickResponse::New() const {
  return new ClickResponse;
}

void ClickResponse::Clear() {
  if (has_cookiesid()) {
    if (cookiesid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cookiesid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.share.ClickResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookiesId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookiesid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cookiesid().data(), this->cookiesid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cookiesid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.share.ClickResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.share.ClickResponse)
  return false;
#undef DO_
}

void ClickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.share.ClickResponse)
  // required string cookiesId = 1;
  if (has_cookiesid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookiesid().data(), this->cookiesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookiesid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cookiesid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.share.ClickResponse)
}

::google::protobuf::uint8* ClickResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.share.ClickResponse)
  // required string cookiesId = 1;
  if (has_cookiesid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cookiesid().data(), this->cookiesid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cookiesid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookiesid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.share.ClickResponse)
  return target;
}

int ClickResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookiesId = 1;
    if (has_cookiesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookiesid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickResponse::MergeFrom(const ClickResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookiesid()) {
      set_cookiesid(from.cookiesid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickResponse::CopyFrom(const ClickResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClickResponse::Swap(ClickResponse* other) {
  if (other != this) {
    std::swap(cookiesid_, other->cookiesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickResponse_descriptor_;
  metadata.reflection = ClickResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace share
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
