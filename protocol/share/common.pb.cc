// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace share {

namespace {

const ::google::protobuf::Descriptor* GeoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  GeoInfo_descriptor_ = file->message_type(0);
  static const int GeoInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, street_),
  };
  GeoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoInfo_descriptor_,
      GeoInfo::default_instance_,
      GeoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoInfo));
  AdInfo_descriptor_ = file->message_type(1);
  static const int AdInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, advid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, cpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, clickid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, adxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, landingurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, bidprice_),
  };
  AdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdInfo_descriptor_,
      AdInfo::default_instance_,
      AdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoInfo_descriptor_, &GeoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdInfo_descriptor_, &AdInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete GeoInfo::default_instance_;
  delete GeoInfo_reflection_;
  delete AdInfo::default_instance_;
  delete AdInfo_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\016protocol.share\"\201\001\n\007GeoIn"
    "fo\022\020\n\010latitude\030\001 \001(\t\022\021\n\tlongitude\030\002 \001(\t\022"
    "\017\n\007country\030\003 \001(\005\022\020\n\010province\030\004 \001(\005\022\014\n\004ci"
    "ty\030\005 \001(\005\022\020\n\010district\030\006 \001(\005\022\016\n\006street\030\007 \001"
    "(\005\"\272\001\n\006AdInfo\022\r\n\005advId\030\001 \002(\005\022\014\n\004cpid\030\002 \001"
    "(\005\022\013\n\003sid\030\003 \001(\005\022\013\n\003bid\030\004 \001(\005\022\017\n\007clickId\030"
    "\005 \001(\005\022\r\n\005adxid\030\006 \001(\005\022\013\n\003mid\030\007 \001(\005\022\013\n\003cid"
    "\030\010 \001(\005\022\013\n\003pid\030\t \001(\005\022\022\n\nlandingUrl\030\n \001(\t\022"
    "\014\n\004cost\030\013 \001(\005\022\020\n\010bidPrice\030\014 \001(\005", 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  GeoInfo::default_instance_ = new GeoInfo();
  AdInfo::default_instance_ = new AdInfo();
  GeoInfo::default_instance_->InitAsDefaultInstance();
  AdInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GeoInfo::kLatitudeFieldNumber;
const int GeoInfo::kLongitudeFieldNumber;
const int GeoInfo::kCountryFieldNumber;
const int GeoInfo::kProvinceFieldNumber;
const int GeoInfo::kCityFieldNumber;
const int GeoInfo::kDistrictFieldNumber;
const int GeoInfo::kStreetFieldNumber;
#endif  // !_MSC_VER

GeoInfo::GeoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.share.GeoInfo)
}

void GeoInfo::InitAsDefaultInstance() {
}

GeoInfo::GeoInfo(const GeoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.share.GeoInfo)
}

void GeoInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  latitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = 0;
  province_ = 0;
  city_ = 0;
  district_ = 0;
  street_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoInfo::~GeoInfo() {
  // @@protoc_insertion_point(destructor:protocol.share.GeoInfo)
  SharedDtor();
}

void GeoInfo::SharedDtor() {
  if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete latitude_;
  }
  if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete longitude_;
  }
  if (this != default_instance_) {
  }
}

void GeoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoInfo_descriptor_;
}

const GeoInfo& GeoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GeoInfo* GeoInfo::default_instance_ = NULL;

GeoInfo* GeoInfo::New() const {
  return new GeoInfo;
}

void GeoInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GeoInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(country_, street_);
    if (has_latitude()) {
      if (latitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        latitude_->clear();
      }
    }
    if (has_longitude()) {
      if (longitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        longitude_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.share.GeoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string latitude = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "latitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_longitude;
        break;
      }

      // optional string longitude = 2;
      case 2: {
        if (tag == 18) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "longitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional int32 country = 3;
      case 3: {
        if (tag == 24) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_province;
        break;
      }

      // optional int32 province = 4;
      case 4: {
        if (tag == 32) {
         parse_province:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &province_)));
          set_has_province();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_city;
        break;
      }

      // optional int32 city = 5;
      case 5: {
        if (tag == 40) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_district;
        break;
      }

      // optional int32 district = 6;
      case 6: {
        if (tag == 48) {
         parse_district:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &district_)));
          set_has_district();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_street;
        break;
      }

      // optional int32 street = 7;
      case 7: {
        if (tag == 56) {
         parse_street:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &street_)));
          set_has_street();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.share.GeoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.share.GeoInfo)
  return false;
#undef DO_
}

void GeoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.share.GeoInfo)
  // optional string latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->latitude(), output);
  }

  // optional string longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->longitude(), output);
  }

  // optional int32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->country(), output);
  }

  // optional int32 province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->province(), output);
  }

  // optional int32 city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->city(), output);
  }

  // optional int32 district = 6;
  if (has_district()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->district(), output);
  }

  // optional int32 street = 7;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.share.GeoInfo)
}

::google::protobuf::uint8* GeoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.share.GeoInfo)
  // optional string latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "latitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latitude(), target);
  }

  // optional string longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "longitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->longitude(), target);
  }

  // optional int32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->country(), target);
  }

  // optional int32 province = 4;
  if (has_province()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->province(), target);
  }

  // optional int32 city = 5;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->city(), target);
  }

  // optional int32 district = 6;
  if (has_district()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->district(), target);
  }

  // optional int32 street = 7;
  if (has_street()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.share.GeoInfo)
  return target;
}

int GeoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string latitude = 1;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string longitude = 2;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

    // optional int32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 province = 4;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->province());
    }

    // optional int32 city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city());
    }

    // optional int32 district = 6;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->district());
    }

    // optional int32 street = 7;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoInfo::MergeFrom(const GeoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoInfo::CopyFrom(const GeoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoInfo::IsInitialized() const {

  return true;
}

void GeoInfo::Swap(GeoInfo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(district_, other->district_);
    std::swap(street_, other->street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoInfo_descriptor_;
  metadata.reflection = GeoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdInfo::kAdvIdFieldNumber;
const int AdInfo::kCpidFieldNumber;
const int AdInfo::kSidFieldNumber;
const int AdInfo::kBidFieldNumber;
const int AdInfo::kClickIdFieldNumber;
const int AdInfo::kAdxidFieldNumber;
const int AdInfo::kMidFieldNumber;
const int AdInfo::kCidFieldNumber;
const int AdInfo::kPidFieldNumber;
const int AdInfo::kLandingUrlFieldNumber;
const int AdInfo::kCostFieldNumber;
const int AdInfo::kBidPriceFieldNumber;
#endif  // !_MSC_VER

AdInfo::AdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.share.AdInfo)
}

void AdInfo::InitAsDefaultInstance() {
}

AdInfo::AdInfo(const AdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.share.AdInfo)
}

void AdInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  advid_ = 0;
  cpid_ = 0;
  sid_ = 0;
  bid_ = 0;
  clickid_ = 0;
  adxid_ = 0;
  mid_ = 0;
  cid_ = 0;
  pid_ = 0;
  landingurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = 0;
  bidprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdInfo::~AdInfo() {
  // @@protoc_insertion_point(destructor:protocol.share.AdInfo)
  SharedDtor();
}

void AdInfo::SharedDtor() {
  if (landingurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete landingurl_;
  }
  if (this != default_instance_) {
  }
}

void AdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdInfo_descriptor_;
}

const AdInfo& AdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AdInfo* AdInfo::default_instance_ = NULL;

AdInfo* AdInfo::New() const {
  return new AdInfo;
}

void AdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(advid_, cid_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(pid_, bidprice_);
    if (has_landingurl()) {
      if (landingurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        landingurl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.share.AdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 advId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advid_)));
          set_has_advid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cpid;
        break;
      }

      // optional int32 cpid = 2;
      case 2: {
        if (tag == 16) {
         parse_cpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpid_)));
          set_has_cpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bid;
        break;
      }

      // optional int32 bid = 4;
      case 4: {
        if (tag == 32) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clickId;
        break;
      }

      // optional int32 clickId = 5;
      case 5: {
        if (tag == 40) {
         parse_clickId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clickid_)));
          set_has_clickid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_adxid;
        break;
      }

      // optional int32 adxid = 6;
      case 6: {
        if (tag == 48) {
         parse_adxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adxid_)));
          set_has_adxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mid;
        break;
      }

      // optional int32 mid = 7;
      case 7: {
        if (tag == 56) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cid;
        break;
      }

      // optional int32 cid = 8;
      case 8: {
        if (tag == 64) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pid;
        break;
      }

      // optional int32 pid = 9;
      case 9: {
        if (tag == 72) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_landingUrl;
        break;
      }

      // optional string landingUrl = 10;
      case 10: {
        if (tag == 82) {
         parse_landingUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landingurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->landingurl().data(), this->landingurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "landingurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cost;
        break;
      }

      // optional int32 cost = 11;
      case 11: {
        if (tag == 88) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bidPrice;
        break;
      }

      // optional int32 bidPrice = 12;
      case 12: {
        if (tag == 96) {
         parse_bidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
          set_has_bidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.share.AdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.share.AdInfo)
  return false;
#undef DO_
}

void AdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.share.AdInfo)
  // required int32 advId = 1;
  if (has_advid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->advid(), output);
  }

  // optional int32 cpid = 2;
  if (has_cpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpid(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional int32 bid = 4;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bid(), output);
  }

  // optional int32 clickId = 5;
  if (has_clickid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clickid(), output);
  }

  // optional int32 adxid = 6;
  if (has_adxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adxid(), output);
  }

  // optional int32 mid = 7;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mid(), output);
  }

  // optional int32 cid = 8;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cid(), output);
  }

  // optional int32 pid = 9;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pid(), output);
  }

  // optional string landingUrl = 10;
  if (has_landingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landingurl().data(), this->landingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landingurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->landingurl(), output);
  }

  // optional int32 cost = 11;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cost(), output);
  }

  // optional int32 bidPrice = 12;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bidprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.share.AdInfo)
}

::google::protobuf::uint8* AdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.share.AdInfo)
  // required int32 advId = 1;
  if (has_advid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->advid(), target);
  }

  // optional int32 cpid = 2;
  if (has_cpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpid(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional int32 bid = 4;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bid(), target);
  }

  // optional int32 clickId = 5;
  if (has_clickid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clickid(), target);
  }

  // optional int32 adxid = 6;
  if (has_adxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adxid(), target);
  }

  // optional int32 mid = 7;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mid(), target);
  }

  // optional int32 cid = 8;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cid(), target);
  }

  // optional int32 pid = 9;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pid(), target);
  }

  // optional string landingUrl = 10;
  if (has_landingurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landingurl().data(), this->landingurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landingurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->landingurl(), target);
  }

  // optional int32 cost = 11;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cost(), target);
  }

  // optional int32 bidPrice = 12;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bidprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.share.AdInfo)
  return target;
}

int AdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 advId = 1;
    if (has_advid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advid());
    }

    // optional int32 cpid = 2;
    if (has_cpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpid());
    }

    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 bid = 4;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 clickId = 5;
    if (has_clickid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clickid());
    }

    // optional int32 adxid = 6;
    if (has_adxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adxid());
    }

    // optional int32 mid = 7;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 cid = 8;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pid = 9;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string landingUrl = 10;
    if (has_landingurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landingurl());
    }

    // optional int32 cost = 11;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 bidPrice = 12;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdInfo::MergeFrom(const AdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advid()) {
      set_advid(from.advid());
    }
    if (from.has_cpid()) {
      set_cpid(from.cpid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_clickid()) {
      set_clickid(from.clickid());
    }
    if (from.has_adxid()) {
      set_adxid(from.adxid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_landingurl()) {
      set_landingurl(from.landingurl());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_bidprice()) {
      set_bidprice(from.bidprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdInfo::CopyFrom(const AdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdInfo::Swap(AdInfo* other) {
  if (other != this) {
    std::swap(advid_, other->advid_);
    std::swap(cpid_, other->cpid_);
    std::swap(sid_, other->sid_);
    std::swap(bid_, other->bid_);
    std::swap(clickid_, other->clickid_);
    std::swap(adxid_, other->adxid_);
    std::swap(mid_, other->mid_);
    std::swap(cid_, other->cid_);
    std::swap(pid_, other->pid_);
    std::swap(landingurl_, other->landingurl_);
    std::swap(cost_, other->cost_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdInfo_descriptor_;
  metadata.reflection = AdInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace share
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
